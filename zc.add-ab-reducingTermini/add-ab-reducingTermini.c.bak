#include <glylib.h>

int main (int argc, char *argv[]){
if (argc!=2) {
    printf("Usage: add-ab-reducingTermini.exe input_filename\n");
}
if (argc==2) { // If started correctly
// Pointers to the coords of the three atoms
coord_3D *a,*b,*c;
a=(coord_3D*)calloc(1, sizeof(coord_3D));
b=(coord_3D*)calloc(1, sizeof(coord_3D));
c=(coord_3D*)calloc(1, sizeof(coord_3D));

int ai=0,ri=0;
int resnum=0;
// Load pdb into assembly 
assembly A;
load_pdb(argv[1], &A);

//printf("%s\n",A.m[0][0].r[1].a[ai].N);
printf("Program must now print a,b,c or there is something wrong with your input pdb file\n");
for(ri=0; A.m[0][0].nr; ri++){
    if (strcmp(A.m[0][0].r[ri].N, "3LB") == 0){
        resnum = A.m[0][0].r[ri].n;
        for(ai=0; ai<A.m[0][0].r[ri].na; ai++){
	    if (strcmp(A.m[0][0].r[ri].a[ai].N, "C5") == 0) { a = &A.m[0][0].r[ri].a[ai].x; printf("a\n"); }
            if (strcmp(A.m[0][0].r[ri].a[ai].N, "O5") == 0) { b = &A.m[0][0].r[ri].a[ai].x; printf("b\n"); }
            if (strcmp(A.m[0][0].r[ri].a[ai].N, "C1") == 0) { c = &A.m[0][0].r[ri].a[ai].x; printf("c\n"); }        
        }
    }
}
//vectormag_3D v34, nv34;
//v34=get_vector_from_coords(*b,*c);
//nv34=normalize_vec(v34);

//dprint_vectormag_3D(&v34);
//dprint_vectormag_3D(&nv34);

//c->i=(c->i+nv34.i*1.0); // set last figure for distance from C atom to plane
//c->j=(c->j+nv34.j*1.0);
//c->k=(c->k+nv34.k*1.0);

//double theta=1.57079633; // angle between BCD. Set to 90.
double theta=1.95; // Roughly 112 degrees
double distance=1.47; // bond length to new atom
coord_3D o1;

//double phi=0;// Torsion between ABCD. I think it's actually polar coord but no worries.
// phi does not make sense to me. 0 gives 180degrees. pi gives zero. I think there is a bug in the function.

//Petresuc
//Phi=261.0 deg or 4.5553 radians
//Psi=177.3 deg or 3.0945 radians
//ch2=177.6 deg or 3.0997 radians
//ch1=191.6 deg or 3.3441 radians
//pi gives zero. half pi gives 90 as it should but everything else is inverted. So 91 gives 89. Use negative values of pi to get over 180.
//In each case to get correct value (in degrees) subtract 180 and change the sign. 

//beta
double phi=0.0;
o1=get_cartesian_point_from_internal_coords( *a, *b, *c, theta, phi, distance);
printf("HETATM    1  O1  ROH   %3d    %8.3f%8.3f%8.3f  1.00  0.00\n",resnum,o1.i,o1.j,o1.k);
//alpha
phi=2.09;
o1=get_cartesian_point_from_internal_coords( *a, *b, *c, theta, phi, distance);
printf("HETATM    1  O1  ROH   %3d    %8.3f%8.3f%8.3f  1.00  0.00\n",resnum,o1.i,o1.j,o1.k);



}
return 0;
}

